<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <mvc:annotation-driven />
    <mvc:resources mapping="/resources/**" location="/resources/" />
    <context:component-scan base-package="beezzy"/>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
            p:prefix="/WEB-INF/pages/"
            p:suffix=".jsp" />

    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close"
        p:driverClassName="${database.driver}"
        p:url="${database.url}"
        p:username="${database.username}"
        p:password="${database.password}"/>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
          p:configLocation="classpath:hibernate.cfg.xml" >
        <property name="dataSource"  ref="dataSource" />
    </bean>

    <tx:annotation-driven />
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager" >
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean id="placeholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
        p:location="classpath:environment.properties" />


    <bean id="httpSessionSecurityContextRepository"
          class='org.springframework.security.web.context.HttpSessionSecurityContextRepository'>
        <property name='allowSessionCreation' value='false' />
    </bean>

    <bean id="securityContextPersistenceFilter"
          class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
        <constructor-arg ref="httpSessionSecurityContextRepository" />
    </bean>

    <bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <constructor-arg>
            <list>
                <security:filter-chain pattern="/**"
                                  filters="securityContextPersistenceFilter" />
            </list>
        </constructor-arg>
    </bean>

    <security:global-method-security authentication-manager-ref="authenticationManager" secured-annotations="enabled" pre-post-annotations="enabled"/>

    <security:http auto-config="true" use-expressions="true" pattern="/">
        <!-- access denied page -->
        <security:form-login login-page="/login" login-processing-url="/j_spring_security_check" password-parameter="j_password" username-parameter="j_username"/>
        <security:anonymous username="guest" granted-authority="ROLE_ANONYMOUS" enabled="true"/>
        <security:http-basic />
        <security:remember-me token-validity-seconds="2419200" />
        <security:csrf disabled="true"/>
    </security:http>

    <security:jdbc-user-service id="userService"
                       data-source-ref="dataSource"
                       users-by-username-query=
                               "select email as username, password, active from users where email=?"
                       authorities-by-username-query=
                               "SELECT users.email as username, permissions.name
                                FROM permissions
                                inner join role_to_permission on role_to_permission.permission_id=permissions.permission_id
                                inner join users on users.role_id=role_to_permission.role_id
                                where user.email=?;" />


    <security:authentication-manager id="authenticationManager">
        <security:authentication-provider user-service-ref="userService">
            <security:password-encoder hash="md5" />
        </security:authentication-provider>
    </security:authentication-manager>
</beans>